name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: strellerminds_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(npm version --no-git-tag-version patch)
          else
            VERSION="${{ github.ref_name }}-$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm run test:coverage:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:coverage:integration
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: strellerminds_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: strellerminds_test

      - name: Security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ci-tests
          name: ci-tests

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 2: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-test.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: |
            trivy-results.sarif
            snyk-results.json

  # Job 3: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance baseline
        run: npm run perf:baseline

      - name: Run load tests
        run: npm run load:test:full

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: test-reports/performance/

  # Job 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.strellerminds.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging (Blue-Green)
        id: deploy
        run: |
          echo "Deploying version ${{ needs.build-and-test.outputs.version }} to staging"
          ./scripts/blue-green-deploy.sh staging ${{ needs.build-and-test.outputs.image-tag }}
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.version }}

      - name: Run smoke tests
        run: ./scripts/smoke-tests.sh staging
        timeout-minutes: 10

      - name: Health check
        run: |
          for i in {1..30}; do
            if curl -f https://staging.strellerminds.com/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "Health check failed after 30 attempts"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          ./scripts/rollback.sh staging
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Job 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://strellerminds.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval gate
        uses: trstringer/manual-approval@v1
        if: github.event_name != 'workflow_dispatch'
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Deploy ${{ needs.build-and-test.outputs.version }} to Production"
          issue-body: |
            Please review and approve the deployment of version ${{ needs.build-and-test.outputs.version }} to production.
            
            **Changes:**
            ${{ github.event.head_commit.message }}
            
            **Security Scan:** ✅ Passed
            **Performance Test:** ✅ Passed
            **Staging Deployment:** ✅ Successful

      - name: Pre-deployment backup
        run: |
          echo "Creating pre-deployment backup..."
          ./scripts/backup-database.sh production
        env:
          DB_CONNECTION_STRING: ${{ secrets.PROD_DB_CONNECTION_STRING }}

      - name: Deploy to production (Blue-Green)
        id: deploy
        run: |
          echo "Deploying version ${{ needs.build-and-test.outputs.version }} to production"
          ./scripts/blue-green-deploy.sh production ${{ needs.build-and-test.outputs.image-tag }}
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.version }}

      - name: Run production smoke tests
        run: ./scripts/smoke-tests.sh production
        timeout-minutes: 15

      - name: Monitor deployment
        run: |
          echo "Monitoring deployment for 5 minutes..."
          ./scripts/monitor-deployment.sh production 300
        timeout-minutes: 6

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Production deployment failed, initiating emergency rollback..."
          ./scripts/emergency-rollback.sh production
          ./scripts/restore-database.sh production
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          DB_CONNECTION_STRING: ${{ secrets.PROD_DB_CONNECTION_STRING }}

      - name: Update deployment status
        if: success()
        run: |
          echo "Deployment successful, updating status..."
          ./scripts/update-deployment-status.sh production ${{ needs.build-and-test.outputs.version }} success

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "${{ job.status == 'success' && '🚀 Production Deployment Successful' || '🚨 Production Deployment Failed' }}",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [{
                  "title": "Version",
                  "value": "${{ needs.build-and-test.outputs.version }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }]
              }]
            }

  # Job 6: Rollback (Manual Trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Confirm rollback
        run: |
          echo "⚠️  ROLLBACK INITIATED for ${{ github.event.inputs.environment }}"
          echo "This will revert to the previous stable version"

      - name: Execute rollback
        run: |
          ./scripts/rollback.sh ${{ github.event.inputs.environment }}
        env:
          KUBE_CONFIG: ${{ github.event.inputs.environment == 'production' && secrets.KUBE_CONFIG_PRODUCTION || secrets.KUBE_CONFIG_STAGING }}

      - name: Verify rollback
        run: |
          ./scripts/verify-rollback.sh ${{ github.event.inputs.environment }}
        timeout-minutes: 10

      - name: Notify rollback completion
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "${{ job.status == 'success' && '✅ Rollback Completed' || '❌ Rollback Failed' }}",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'warning' || 'danger' }}",
                "fields": [{
                  "title": "Environment",
                  "value": "${{ github.event.inputs.environment }}",
                  "short": true
                }, {
                  "title": "Triggered By",
                  "value": "${{ github.actor }}",
                  "short": true
                }]
              }]
            }

  # Job 7: Post-Deployment Monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring
        run: |
          echo "Setting up post-deployment monitoring..."
          ./scripts/setup-monitoring.sh production

      - name: Run extended health checks
        run: |
          ./scripts/extended-health-check.sh production
        timeout-minutes: 30

      - name: Performance regression test
        run: |
          ./scripts/performance-regression-test.sh production
        timeout-minutes: 20

      - name: Generate deployment report
        run: |
          ./scripts/generate-deployment-report.sh production ${{ needs.build-and-test.outputs.version }}

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: reports/deployment-report.json

  # Job 8: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always()

    steps:
      - name: Cleanup old images
        run: |
          echo "Cleaning up old container images..."
          # Keep last 5 versions
          ./scripts/cleanup-images.sh 5

      - name: Archive artifacts
        run: |
          echo "Archiving deployment artifacts..."
          ./scripts/archive-artifacts.sh ${{ github.run_id }}

      - name: Update metrics
        run: |
          echo "Updating deployment metrics..."
          ./scripts/update-metrics.sh ${{ github.run_id }} ${{ job.status }}
