config:
  target: 'http://localhost:3000'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 5
      name: 'Warm-up'
    # Ramp-up phase
    - duration: 120
      arrivalRate: 5
      rampTo: 50
      name: 'Ramp-up'
    # Sustained load phase
    - duration: 300
      arrivalRate: 50
      name: 'Sustained load'
    # Peak load phase
    - duration: 120
      arrivalRate: 50
      rampTo: 100
      name: 'Peak load'
    # Cool-down phase
    - duration: 60
      arrivalRate: 100
      rampTo: 5
      name: 'Cool-down'

  # Performance thresholds
  ensure:
    maxErrorRate: 1
    maxResponseTime: 2000
    minThoughput: 100

  # Plugins for enhanced reporting
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
    publish-metrics:
      - type: statsd
        host: localhost
        port: 8125
        prefix: 'artillery'
    expect: {}

  # HTTP configuration
  http:
    timeout: 10
    pool: 50
    maxSockets: 50

  # Variables for dynamic testing
  variables:
    testUser:
      - 'testuser1@example.com'
      - 'testuser2@example.com'
      - 'testuser3@example.com'
    testPassword: 'TestPassword123!'

scenarios:
  # Health check scenario
  - name: 'Health Check'
    weight: 10
    flow:
      - get:
          url: '/health'
          expect:
            - statusCode: 200
            - hasProperty: 'status'

  # Authentication flow
  - name: 'Authentication Flow'
    weight: 30
    flow:
      - post:
          url: '/auth/login'
          json:
            email: '{{ testUser }}'
            password: '{{ testPassword }}'
          capture:
            - json: '$.access_token'
              as: 'authToken'
          expect:
            - statusCode: 200
            - hasProperty: 'access_token'

      - get:
          url: '/auth/profile'
          headers:
            Authorization: 'Bearer {{ authToken }}'
          expect:
            - statusCode: 200

  # Course browsing scenario
  - name: 'Course Browsing'
    weight: 40
    flow:
      # Get all courses
      - get:
          url: '/courses'
          qs:
            page: 1
            limit: 20
          expect:
            - statusCode: 200

      # Get course categories
      - get:
          url: '/courses/categories'
          expect:
            - statusCode: 200

      # Search courses
      - get:
          url: '/courses/search'
          qs:
            q: 'blockchain'
            page: 1
            limit: 10
          expect:
            - statusCode: 200

  # User registration scenario
  - name: 'User Registration'
    weight: 20
    flow:
      - post:
          url: '/auth/register'
          json:
            firstName: 'Load'
            lastName: 'Test'
            email: 'loadtest{{ $randomString() }}@example.com'
            username: 'loadtest{{ $randomString() }}'
            password: 'TestPassword123!'
          expect:
            - statusCode: 201
