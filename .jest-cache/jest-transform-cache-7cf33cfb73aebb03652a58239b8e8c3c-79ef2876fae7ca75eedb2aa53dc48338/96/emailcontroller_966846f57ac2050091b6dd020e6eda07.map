{"file":"C:\\Users\\ojoseph\\Documents\\StrellerMinds-Backend\\src\\email\\email.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\ojoseph\\Documents\\StrellerMinds-Backend\\src\\email\\email.controller.ts"],"sourcesContent":["/**\r\n * EmailController handles endpoints for managing email preferences, analytics, and tracking.\r\n */\r\nimport { Controller, Get, Post, Body, Param, Query, Res, Req, ForbiddenException, Logger, UseGuards } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam, ApiQuery } from '@nestjs/swagger';\r\nimport { EmailService } from './email.service';\r\nimport { EmailPreference } from './entities/email-preference.entity';\r\nimport { Response, Request } from 'express';\r\nimport { EmailTrackingUtil } from './utils/tracking.util';\r\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\r\n\r\n@ApiTags('Email')\r\n@Controller('email')\r\nexport class EmailController {\r\n  private readonly logger = new Logger(EmailController.name);\r\n\r\n  constructor(\r\n    private readonly emailService: EmailService,\r\n    private readonly trackingUtil: EmailTrackingUtil,\r\n  ) {}\r\n  /**\r\n   * Track email open via transparent pixel\r\n   */\r\n  @Get('track/open/:token.png')\r\n  @ApiOperation({ summary: 'Track email open via pixel' })\r\n  @ApiParam({ name: 'token', description: 'Email tracking token' })\r\n  async trackOpen(\r\n    @Param('token') token: string,\r\n    @Req() req: Request,\r\n    @Res() res: Response,\r\n  ): Promise<void> {\r\n    try {\r\n      const metadata = {\r\n        userAgent: req.headers['user-agent']?.toString().substring(0, 255),\r\n        ipAddress: this.getClientIp(req),\r\n      };\r\n\r\n      await this.emailService.markEmailAsOpened(token, metadata);\r\n\r\n      const pixel = Buffer.from(\r\n        'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',\r\n        'base64'\r\n      );\r\n\r\n      res.writeHead(200, {\r\n        'Content-Type': 'image/png',\r\n        'Content-Length': pixel.length,\r\n        'Cache-Control': 'no-store, no-cache, must-revalidate, private',\r\n        'Pragma': 'no-cache',\r\n        'Expires': '0',\r\n        'X-Content-Type-Options': 'nosniff',\r\n        'X-Frame-Options': 'DENY',\r\n        'Referrer-Policy': 'no-referrer',\r\n      });\r\n      res.end(pixel);\r\n    } catch (error) {\r\n      this.logger.error(`Error tracking email open: ${error.message}`);\r\n      const pixel = Buffer.from(\r\n        'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',\r\n        'base64'\r\n      );\r\n      res.writeHead(200, {\r\n        'Content-Type': 'image/png',\r\n        'Content-Length': pixel.length,\r\n      });\r\n      res.end(pixel);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track email click and redirect\r\n   */\r\n  @Get('track/click/:token')\r\n  @ApiOperation({ summary: 'Track email click and redirect' })\r\n  @ApiParam({ name: 'token', description: 'Email tracking token' })\r\n  @ApiQuery({ name: 'url', description: 'Target URL (encoded)' })\r\n  @ApiQuery({ name: 'sig', description: 'HMAC signature' })\r\n  async trackClick(\r\n    @Param('token') token: string,\r\n    @Query('url') encodedUrl: string,\r\n    @Query('sig') signature: string,\r\n    @Req() req: Request,\r\n    @Res() res: Response,\r\n  ): Promise<void> {\r\n    try {\r\n      const targetUrl = decodeURIComponent(encodedUrl);\r\n\r\n      const isValid = this.trackingUtil.verifySignature(token, targetUrl, signature);\r\n      if (!isValid) {\r\n        this.logger.warn(`Invalid tracking signature for token: ${token}`);\r\n        throw new ForbiddenException('Invalid tracking signature');\r\n      }\r\n\r\n      const metadata = {\r\n        userAgent: req.headers['user-agent']?.toString().substring(0, 255),\r\n        ipAddress: this.getClientIp(req),\r\n      };\r\n\r\n      await this.emailService.markEmailAsClicked(token, targetUrl, metadata);\r\n\r\n      res.redirect(302, targetUrl);\r\n    } catch (error) {\r\n      if (error instanceof ForbiddenException) {\r\n        throw error;\r\n      }\r\n      this.logger.error(`Error tracking email click: ${error.message}`);\r\n      res.redirect(302, '/');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get email analytics (protected)\r\n   */\r\n  @Get('track/analytics/:emailId')\r\n  @UseGuards(JwtAuthGuard)\r\n  @ApiOperation({ summary: 'Get email tracking analytics' })\r\n  @ApiParam({ name: 'emailId', description: 'Email log ID' })\r\n  async getAnalytics(@Param('emailId') emailId: string) {\r\n    return this.emailService.getEmailAnalytics(emailId);\r\n  }\r\n\r\n  private getClientIp(req: Request): string {\r\n    const forwarded = req.headers['x-forwarded-for'];\r\n    if (typeof forwarded === 'string') {\r\n      return forwarded.split(',')[0].trim();\r\n    }\r\n    return (req.socket as any)?.remoteAddress || 'unknown';\r\n  }\r\n\r\n  /**\r\n   * Update a user's email preference for a specific email type.\r\n   * @param body - Email, emailType, and optOut flag\r\n   * @returns The updated EmailPreference entity\r\n   */\r\n  @Post('preferences')\r\n  @ApiOperation({ summary: 'Update email preference', description: 'Update a user\\'s email preference for a specific email type.' })\r\n  @ApiBody({ schema: { properties: { email: { type: 'string' }, emailType: { type: 'string' }, optOut: { type: 'boolean' } } } })\r\n  @ApiResponse({ status: 200, description: 'Email preference updated', type: EmailPreference })\r\n  async updatePreference(\r\n    @Body() body: { email: string; emailType: string; optOut: boolean },\r\n  ): Promise<EmailPreference> {\r\n    return this.emailService.updateEmailPreference(\r\n      body.email,\r\n      body.emailType,\r\n      body.optOut,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get email analytics for a date range and optional template name.\r\n   * @param startDate - Start date (ISO8601)\r\n   * @param endDate - End date (ISO8601)\r\n   * @param templateName - Optional template name\r\n   * @returns Analytics data\r\n   */\r\n  @Get('analytics')\r\n  @ApiOperation({ summary: 'Get email analytics', description: 'Get email analytics for a date range and optional template name.' })\r\n  @ApiQuery({ name: 'startDate', required: true, description: 'Start date (ISO8601)' })\r\n  @ApiQuery({ name: 'endDate', required: true, description: 'End date (ISO8601)' })\r\n  @ApiQuery({ name: 'templateName', required: false, description: 'Template name' })\r\n  @ApiResponse({ status: 200, description: 'Email analytics data' })\r\n  async getAnalytics(\r\n    @Query('startDate') startDate: string,\r\n    @Query('endDate') endDate: string,\r\n    @Query('templateName') templateName?: string,\r\n  ) {\r\n    return this.emailService.getEmailAnalytics(\r\n      new Date(startDate),\r\n      new Date(endDate),\r\n      templateName,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Track email open event (returns a 1x1 transparent pixel).\r\n   * @param id - Email log ID\r\n   * @param res - Response object\r\n   */\r\n  @Get('track/open/:id')\r\n  @ApiOperation({ summary: 'Track email open', description: 'Track email open event (returns a 1x1 transparent pixel).' })\r\n  @ApiParam({ name: 'id', description: 'Email log ID' })\r\n  @ApiResponse({ status: 200, description: '1x1 transparent pixel returned' })\r\n  async trackOpen(@Param('id') id: string, @Res() res) {\r\n    try {\r\n      // Update the email log to mark as opened\r\n      await this.emailService.markEmailAsOpened(id);\r\n\r\n      // Return a 1x1 transparent pixel\r\n      const buffer = Buffer.from(\r\n        'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7',\r\n        'base64',\r\n      );\r\n\r\n      res.set('Content-Type', 'image/gif');\r\n      res.set(\r\n        'Cache-Control',\r\n        'no-store, no-cache, must-revalidate, proxy-revalidate',\r\n      );\r\n      res.set('Pragma', 'no-cache');\r\n      res.set('Expires', '0');\r\n      return res.send(buffer);\r\n    } catch (error) {\r\n      // Still return the pixel even if tracking fails\r\n      const buffer = Buffer.from(\r\n        'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7',\r\n        'base64',\r\n      );\r\n\r\n      res.set('Content-Type', 'image/gif');\r\n      return res.send(buffer);\r\n    }\r\n  }\r\n\r\n  // This endpoint would be used for tracking email clicks\r\n  @Get('track/click/:id')\r\n  async trackClick(\r\n    @Param('id') id: string,\r\n    @Query('url') url: string,\r\n    @Res() res,\r\n  ) {\r\n    try {\r\n      // Update the email log to mark as clicked\r\n      await this.emailService.markEmailAsClicked(id, url);\r\n    } catch (error) {\r\n      // Log the error but continue with the redirect\r\n      console.error('Error tracking click:', error);\r\n    }\r\n\r\n    // Redirect to the original URL\r\n    return res.redirect(url);\r\n  }\r\n}\r\n"],"version":3}