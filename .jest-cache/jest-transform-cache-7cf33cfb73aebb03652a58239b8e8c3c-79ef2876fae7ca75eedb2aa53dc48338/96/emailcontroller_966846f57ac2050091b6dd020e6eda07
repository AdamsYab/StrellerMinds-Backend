c522e09a619fbfff89490d6b3fdece6f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var EmailController_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailController = void 0;
/**
 * EmailController handles endpoints for managing email preferences, analytics, and tracking.
 */
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const email_service_1 = require("./email.service");
const email_preference_entity_1 = require("./entities/email-preference.entity");
const express_1 = require("express");
const tracking_util_1 = require("./utils/tracking.util");
const jwt_auth_guard_1 = require("../auth/guards/jwt-auth.guard");
let EmailController = EmailController_1 = class EmailController {
    constructor(emailService, trackingUtil) {
        this.emailService = emailService;
        this.trackingUtil = trackingUtil;
        this.logger = new common_1.Logger(EmailController_1.name);
    }
    /**
     * Track email open via transparent pixel
     */
    async trackOpen(token, req, res) {
        try {
            const metadata = {
                userAgent: req.headers['user-agent']?.toString().substring(0, 255),
                ipAddress: this.getClientIp(req),
            };
            await this.emailService.markEmailAsOpened(token, metadata);
            const pixel = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');
            res.writeHead(200, {
                'Content-Type': 'image/png',
                'Content-Length': pixel.length,
                'Cache-Control': 'no-store, no-cache, must-revalidate, private',
                'Pragma': 'no-cache',
                'Expires': '0',
                'X-Content-Type-Options': 'nosniff',
                'X-Frame-Options': 'DENY',
                'Referrer-Policy': 'no-referrer',
            });
            res.end(pixel);
        }
        catch (error) {
            this.logger.error(`Error tracking email open: ${error.message}`);
            const pixel = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');
            res.writeHead(200, {
                'Content-Type': 'image/png',
                'Content-Length': pixel.length,
            });
            res.end(pixel);
        }
    }
    /**
     * Track email click and redirect
     */
    async trackClick(token, encodedUrl, signature, req, res) {
        try {
            const targetUrl = decodeURIComponent(encodedUrl);
            const isValid = this.trackingUtil.verifySignature(token, targetUrl, signature);
            if (!isValid) {
                this.logger.warn(`Invalid tracking signature for token: ${token}`);
                throw new common_1.ForbiddenException('Invalid tracking signature');
            }
            const metadata = {
                userAgent: req.headers['user-agent']?.toString().substring(0, 255),
                ipAddress: this.getClientIp(req),
            };
            await this.emailService.markEmailAsClicked(token, targetUrl, metadata);
            res.redirect(302, targetUrl);
        }
        catch (error) {
            if (error instanceof common_1.ForbiddenException) {
                throw error;
            }
            this.logger.error(`Error tracking email click: ${error.message}`);
            res.redirect(302, '/');
        }
    }
    /**
     * Get email analytics (protected)
     */
    async getAnalytics(emailId) {
        return this.emailService.getEmailAnalytics(emailId);
    }
    getClientIp(req) {
        const forwarded = req.headers['x-forwarded-for'];
        if (typeof forwarded === 'string') {
            return forwarded.split(',')[0].trim();
        }
        return req.socket?.remoteAddress || 'unknown';
    }
    /**
     * Update a user's email preference for a specific email type.
     * @param body - Email, emailType, and optOut flag
     * @returns The updated EmailPreference entity
     */
    async updatePreference(body) {
        return this.emailService.updateEmailPreference(body.email, body.emailType, body.optOut);
    }
    /**
     * Get email analytics for a date range and optional template name.
     * @param startDate - Start date (ISO8601)
     * @param endDate - End date (ISO8601)
     * @param templateName - Optional template name
     * @returns Analytics data
     */
    async getAnalytics(startDate, endDate, templateName) {
        return this.emailService.getEmailAnalytics(new Date(startDate), new Date(endDate), templateName);
    }
    /**
     * Track email open event (returns a 1x1 transparent pixel).
     * @param id - Email log ID
     * @param res - Response object
     */
    async trackOpen(id, res) {
        try {
            // Update the email log to mark as opened
            await this.emailService.markEmailAsOpened(id);
            // Return a 1x1 transparent pixel
            const buffer = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64');
            res.set('Content-Type', 'image/gif');
            res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
            res.set('Pragma', 'no-cache');
            res.set('Expires', '0');
            return res.send(buffer);
        }
        catch (error) {
            // Still return the pixel even if tracking fails
            const buffer = Buffer.from('R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7', 'base64');
            res.set('Content-Type', 'image/gif');
            return res.send(buffer);
        }
    }
    // This endpoint would be used for tracking email clicks
    async trackClick(id, url, res) {
        try {
            // Update the email log to mark as clicked
            await this.emailService.markEmailAsClicked(id, url);
        }
        catch (error) {
            // Log the error but continue with the redirect
            console.error('Error tracking click:', error);
        }
        // Redirect to the original URL
        return res.redirect(url);
    }
};
exports.EmailController = EmailController;
__decorate([
    (0, common_1.Get)('track/open/:token.png'),
    (0, swagger_1.ApiOperation)({ summary: 'Track email open via pixel' }),
    (0, swagger_1.ApiParam)({ name: 'token', description: 'Email tracking token' }),
    __param(0, (0, common_1.Param)('token')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _c : Object, typeof (_d = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], EmailController.prototype, "trackOpen", null);
__decorate([
    (0, common_1.Get)('track/click/:token'),
    (0, swagger_1.ApiOperation)({ summary: 'Track email click and redirect' }),
    (0, swagger_1.ApiParam)({ name: 'token', description: 'Email tracking token' }),
    (0, swagger_1.ApiQuery)({ name: 'url', description: 'Target URL (encoded)' }),
    (0, swagger_1.ApiQuery)({ name: 'sig', description: 'HMAC signature' }),
    __param(0, (0, common_1.Param)('token')),
    __param(1, (0, common_1.Query)('url')),
    __param(2, (0, common_1.Query)('sig')),
    __param(3, (0, common_1.Req)()),
    __param(4, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String, typeof (_f = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _f : Object, typeof (_g = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], EmailController.prototype, "trackClick", null);
__decorate([
    (0, common_1.Get)('track/analytics/:emailId'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({ summary: 'Get email tracking analytics' }),
    (0, swagger_1.ApiParam)({ name: 'emailId', description: 'Email log ID' }),
    __param(0, (0, common_1.Param)('emailId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "getAnalytics", null);
__decorate([
    (0, common_1.Post)('preferences'),
    (0, swagger_1.ApiOperation)({ summary: 'Update email preference', description: 'Update a user\'s email preference for a specific email type.' }),
    (0, swagger_1.ApiBody)({ schema: { properties: { email: { type: 'string' }, emailType: { type: 'string' }, optOut: { type: 'boolean' } } } }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Email preference updated', type: email_preference_entity_1.EmailPreference }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], EmailController.prototype, "updatePreference", null);
__decorate([
    (0, common_1.Get)('analytics'),
    (0, swagger_1.ApiOperation)({ summary: 'Get email analytics', description: 'Get email analytics for a date range and optional template name.' }),
    (0, swagger_1.ApiQuery)({ name: 'startDate', required: true, description: 'Start date (ISO8601)' }),
    (0, swagger_1.ApiQuery)({ name: 'endDate', required: true, description: 'End date (ISO8601)' }),
    (0, swagger_1.ApiQuery)({ name: 'templateName', required: false, description: 'Template name' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Email analytics data' }),
    __param(0, (0, common_1.Query)('startDate')),
    __param(1, (0, common_1.Query)('endDate')),
    __param(2, (0, common_1.Query)('templateName')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, String]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "getAnalytics", null);
__decorate([
    (0, common_1.Get)('track/open/:id'),
    (0, swagger_1.ApiOperation)({ summary: 'Track email open', description: 'Track email open event (returns a 1x1 transparent pixel).' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Email log ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: '1x1 transparent pixel returned' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "trackOpen", null);
__decorate([
    (0, common_1.Get)('track/click/:id'),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Query)('url')),
    __param(2, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Object]),
    __metadata("design:returntype", Promise)
], EmailController.prototype, "trackClick", null);
exports.EmailController = EmailController = EmailController_1 = __decorate([
    (0, swagger_1.ApiTags)('Email'),
    (0, common_1.Controller)('email'),
    __metadata("design:paramtypes", [typeof (_a = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _a : Object, typeof (_b = typeof tracking_util_1.EmailTrackingUtil !== "undefined" && tracking_util_1.EmailTrackingUtil) === "function" ? _b : Object])
], EmailController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,