{"file":"C:\\Users\\ojoseph\\Documents\\StrellerMinds-Backend\\src\\email\\utils\\tracking.util.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\ojoseph\\Documents\\StrellerMinds-Backend\\src\\email\\utils\\tracking.util.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { EmailTrackingUtil } from './tracking.util';\r\n\r\ndescribe('EmailTrackingUtil', () => {\r\n  let util: EmailTrackingUtil;\r\n  const mockSecret = 'test-secret-key-minimum-32-characters-long';\r\n  const mockBaseUrl = 'http://localhost:3000';\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        EmailTrackingUtil,\r\n        {\r\n          provide: ConfigService,\r\n          useValue: {\r\n            get: jest.fn((key: string) => {\r\n              if (key === 'EMAIL_TRACKING_SECRET') return mockSecret;\r\n              if (key === 'EMAIL_TRACKING_BASE_URL') return mockBaseUrl;\r\n              return undefined;\r\n            }),\r\n          },\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    util = module.get<EmailTrackingUtil>(EmailTrackingUtil);\r\n  });\r\n\r\n  it('generateTrackingToken returns 64 hex chars and uniqueness', () => {\r\n    const t1 = util.generateTrackingToken();\r\n    const t2 = util.generateTrackingToken();\r\n    expect(t1).toHaveLength(64);\r\n    expect(t1).toMatch(/^[a-f0-9]{64}$/);\r\n    expect(t1).not.toBe(t2);\r\n  });\r\n\r\n  it('signUrl is deterministic and sensitive to inputs', () => {\r\n    const a = util.signUrl('token123', 'https://example.com');\r\n    const b = util.signUrl('token123', 'https://example.com');\r\n    const c = util.signUrl('token456', 'https://example.com');\r\n    expect(a).toBe(b);\r\n    expect(a).not.toBe(c);\r\n  });\r\n\r\n  it('verifySignature validates correct signatures and rejects invalid', () => {\r\n    const token = 'token123';\r\n    const url = 'https://example.com';\r\n    const sig = util.signUrl(token, url);\r\n    expect(util.verifySignature(token, url, sig)).toBe(true);\r\n    expect(util.verifySignature(token, url, 'bad')).toBe(false);\r\n    expect(util.verifySignature(token, 'https://bad.com', sig)).toBe(false);\r\n  });\r\n\r\n  it('injectOpenTracking appends or injects pixel', () => {\r\n    const htmlWithBody = '<html><body><p>Test</p></body></html>';\r\n    const res1 = util.injectOpenTracking(htmlWithBody, 'abc');\r\n    expect(res1).toContain('/email/track/open/abc.png');\r\n    expect(res1.indexOf('</body>')).toBeGreaterThan(res1.indexOf('<img'));\r\n\r\n    const html = '<p>Test</p>';\r\n    const res2 = util.injectOpenTracking(html, 'abc');\r\n    expect(res2).toContain('/email/track/open/abc.png');\r\n  });\r\n\r\n  it('injectClickTracking wraps links and skips mailto/tel/#', () => {\r\n    const html = `\r\n      <a href=\"https://example.com\">A</a>\r\n      <a href=\"mailto:test@example.com\">B</a>\r\n      <a href=\"#anchor\">C</a>\r\n      <a href=\"tel:+123\">D</a>\r\n    `;\r\n    const res = util.injectClickTracking(html, 'tok');\r\n    expect(res).toContain('/email/track/click/tok');\r\n    expect(res).toContain('url=https%3A%2F%2Fexample.com');\r\n    // unchanged others\r\n    expect(res).toContain('mailto:test@example.com');\r\n    expect(res).toContain('#anchor');\r\n    expect(res).toContain('tel:+123');\r\n  });\r\n\r\n  it('addTrackingToEmail includes both click and open', () => {\r\n    const input = '<html><body><a href=\"https://ex.com\">X</a></body></html>';\r\n    const out = util.addTrackingToEmail(input, 'tok');\r\n    expect(out).toContain('/email/track/click/tok');\r\n    expect(out).toContain('/email/track/open/tok.png');\r\n  });\r\n});\r\n\r\n\r\n"],"version":3}