a72b24017e10a1f025ffe277b72200e6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTrackingUtil = void 0;
exports.addTrackingToEmail = addTrackingToEmail;
exports.generateEmailId = generateEmailId;
exports.addTrackingToEmail = addTrackingToEmail;
exports.generateEmailId = generateEmailId;
const crypto = __importStar(require("crypto"));
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
let EmailTrackingUtil = class EmailTrackingUtil {
    constructor(configService) {
        this.configService = configService;
        this.secret = this.configService.get('EMAIL_TRACKING_SECRET');
        this.baseUrl = this.configService.get('EMAIL_TRACKING_BASE_URL') || this.configService.get('BASE_URL') || '';
        if (!this.secret || this.secret.length < 32) {
            throw new common_1.BadRequestException('EMAIL_TRACKING_SECRET is not configured or too short');
        }
    }
    generateTrackingToken() {
        return crypto.randomBytes(32).toString('hex');
    }
    signUrl(emailIdOrToken, url) {
        const payload = `${emailIdOrToken}:${url}`;
        const hmac = crypto.createHmac('sha256', this.secret);
        hmac.update(payload);
        return hmac.digest('hex');
    }
    verifySignature(emailIdOrToken, url, signature) {
        try {
            const expected = this.signUrl(emailIdOrToken, url);
            const sigBuf = Buffer.from(signature);
            const expBuf = Buffer.from(expected);
            if (sigBuf.length !== expBuf.length)
                return false;
            return crypto.timingSafeEqual(sigBuf, expBuf);
        }
        catch {
            return false;
        }
    }
    getOpenTrackingUrl(trackingToken) {
        return `${this.baseUrl}/email/track/open/${trackingToken}.png`;
    }
    getClickTrackingUrl(trackingToken, targetUrl) {
        const encodedUrl = encodeURIComponent(targetUrl);
        const signature = this.signUrl(trackingToken, targetUrl);
        return `${this.baseUrl}/email/track/click/${trackingToken}?url=${encodedUrl}&sig=${signature}`;
    }
    injectOpenTracking(htmlContent, trackingToken) {
        const pixel = `<img src="${this.getOpenTrackingUrl(trackingToken)}" width="1" height="1" style="display:none;" alt="" />`;
        if (typeof htmlContent !== 'string')
            return pixel;
        if (htmlContent.includes('</body>')) {
            return htmlContent.replace('</body>', `${pixel}</body>`);
        }
        return htmlContent + pixel;
    }
    injectClickTracking(htmlContent, trackingToken) {
        if (typeof htmlContent !== 'string')
            return htmlContent;
        const hrefRegex = /href=["']([^"']+)["']/gi;
        return htmlContent.replace(hrefRegex, (match, url) => {
            if (!url)
                return match;
            if (url.startsWith('mailto:') || url.startsWith('tel:') || url.startsWith('#'))
                return match;
            if (url.includes('/email/track/click/'))
                return match;
            const trackedUrl = this.getClickTrackingUrl(trackingToken, url);
            return `href="${trackedUrl}"`;
        });
    }
    addTrackingToEmail(htmlContent, trackingToken) {
        let tracked = htmlContent;
        tracked = this.injectClickTracking(tracked, trackingToken);
        tracked = this.injectOpenTracking(tracked, trackingToken);
        return tracked;
    }
};
exports.EmailTrackingUtil = EmailTrackingUtil;
exports.EmailTrackingUtil = EmailTrackingUtil = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], EmailTrackingUtil);
// Backwards-compatible helpers for existing imports in EmailService
function addTrackingToEmail(html, trackingToken, baseUrl) {
    // Allow function-style usage by constructing a minimal util with provided baseUrl
    const fakeConfig = {
        get: (key) => (key === 'EMAIL_TRACKING_SECRET' ? process.env.EMAIL_TRACKING_SECRET : key === 'EMAIL_TRACKING_BASE_URL' ? (baseUrl || process.env.EMAIL_TRACKING_BASE_URL || process.env.BASE_URL) : undefined),
    };
    const util = new EmailTrackingUtil(fakeConfig);
    return util.addTrackingToEmail(html, trackingToken);
}
function generateEmailId() {
    return crypto.randomBytes(16).toString('hex');
}
const uuid_1 = require("uuid");
function addTrackingToEmail(html, emailId, baseUrl) {
    // Add tracking pixel for opens
    const trackingPixel = `<img src="${baseUrl}/email/track/open/${emailId}" width="1" height="1" alt="" style="display:none;">`;
    // Add tracking to all links
    let modifiedHtml = html.replace(/<a\s+(?:[^>]*?\s+)?href=["']([^"']*)["']/gi, (match, url) => {
        // Don't track unsubscribe links
        if (url.includes("/unsubscribe") || url.includes("/preferences")) {
            return match;
        }
        const trackingUrl = `${baseUrl}/email/track/click/${emailId}?url=${encodeURIComponent(url)}`;
        return match.replace(url, trackingUrl);
    });
    // Add tracking pixel at the end of the email
    modifiedHtml = modifiedHtml.replace("</body>", `${trackingPixel}</body>`);
    return modifiedHtml;
}
function generateEmailId() {
    return (0, uuid_1.v4)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxvam9zZXBoXFxEb2N1bWVudHNcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxlbWFpbFxcdXRpbHNcXHRyYWNraW5nLnV0aWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlGQSxnREFPQztBQUVELDBDQUVDO0FBSUQsZ0RBbUJDO0FBRUQsMENBRUM7QUF2SEQsK0NBQWlDO0FBQ2pDLDJDQUFpRTtBQUNqRSwyQ0FBK0M7QUFHeEMsSUFBTSxpQkFBaUIsR0FBdkIsTUFBTSxpQkFBaUI7SUFJNUIsWUFBNkIsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBUyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQVMseUJBQXlCLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFN0gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDNUMsTUFBTSxJQUFJLDRCQUFtQixDQUFDLHNEQUFzRCxDQUFDLENBQUM7UUFDeEYsQ0FBQztJQUNILENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsT0FBTyxDQUFDLGNBQXNCLEVBQUUsR0FBVztRQUN6QyxNQUFNLE9BQU8sR0FBRyxHQUFHLGNBQWMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUMzQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJ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LE9BQWUsRUFBRSxPQUFlO0lBQy9FLCtCQUErQjtJQUMvQixNQUFNLGFBQWEsR0FBRyxhQUFhLE9BQU8scUJBQXFCLE9BQU8sc0RBQXNELENBQUE7SUFFNUgsNEJBQTRCO0lBQzVCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsNENBQTRDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDM0YsZ0NBQWdDO1FBQ2hDLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7WUFDakUsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQUcsR0FBRyxPQUFPLHNCQUFzQixPQUFPLFFBQVEsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQTtRQUM1RixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsNkNBQTZDO0lBQzdDLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLGFBQWEsU0FBUyxDQUFDLENBQUE7SUFFekUsT0FBTyxZQUFZLENBQUE7QUFDckIsQ0FBQztBQUVELFNBQWdCLGVBQWU7SUFDN0IsT0FBTyxJQUFBLFNBQU0sR0FBRSxDQUFBO0FBQ2pCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxvam9zZXBoXFxEb2N1bWVudHNcXFN0cmVsbGVyTWluZHMtQmFja2VuZFxcc3JjXFxlbWFpbFxcdXRpbHNcXHRyYWNraW5nLnV0aWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsIEJhZFJlcXVlc3RFeGNlcHRpb24gfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IENvbmZpZ1NlcnZpY2UgfSBmcm9tICdAbmVzdGpzL2NvbmZpZyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFbWFpbFRyYWNraW5nVXRpbCB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXQ6IHN0cmluZztcclxuICBwcml2YXRlIHJlYWRvbmx5IGJhc2VVcmw6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWdTZXJ2aWNlOiBDb25maWdTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLnNlY3JldCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPignRU1BSUxfVFJBQ0tJTkdfU0VDUkVUJyk7XHJcbiAgICB0aGlzLmJhc2VVcmwgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oJ0VNQUlMX1RSQUNLSU5HX0JBU0VfVVJMJykgfHwgdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdCQVNFX1VSTCcpIHx8ICcnO1xyXG5cclxuICAgIGlmICghdGhpcy5zZWNyZXQgfHwgdGhpcy5zZWNyZXQubGVuZ3RoIDwgMzIpIHtcclxuICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0VNQUlMX1RSQUNLSU5HX1NFQ1JFVCBpcyBub3QgY29uZmlndXJlZCBvciB0b28gc2hvcnQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdlbmVyYXRlVHJhY2tpbmdUb2tlbigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcygzMikudG9TdHJpbmcoJ2hleCcpO1xyXG4gIH1cclxuXHJcbiAgc2lnblVybChlbWFpbElkT3JUb2tlbjogc3RyaW5nLCB1cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwYXlsb2FkID0gYCR7ZW1haWxJZE9yVG9rZW59OiR7dXJsfWA7XHJcbiAgICBjb25zdCBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHRoaXMuc2VjcmV0KTtcclxuICAgIGhtYWMudXBkYXRlKHBheWxvYWQpO1xyXG4gICAgcmV0dXJuIGhtYWMuZGlnZXN0KCdoZXgnKTtcclxuICB9XHJcblxyXG4gIHZlcmlmeVNpZ25hdHVyZShlbWFpbElkT3JUb2tlbjogc3RyaW5nLCB1cmw6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGV4cGVjdGVkID0gdGhpcy5zaWduVXJsKGVtYWlsSWRPclRva2VuLCB1cmwpO1xyXG4gICAgICBjb25zdCBzaWdCdWYgPSBCdWZmZXIuZnJvbShzaWduYXR1cmUpO1xyXG4gICAgICBjb25zdCBleHBCdWYgPSBCdWZmZXIuZnJvbShleHBlY3RlZCk7XHJcbiAgICAgIGlmIChzaWdCdWYubGVuZ3RoICE9PSBleHBCdWYubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHJldHVybiBjcnlwdG8udGltaW5nU2FmZUVxdWFsKHNpZ0J1ZiwgZXhwQnVmKTtcclxuICAgIH0gY2F0Y2gge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRPcGVuVHJhY2tpbmdVcmwodHJhY2tpbmdUb2tlbjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLmJhc2VVcmx9L2VtYWlsL3RyYWNrL29wZW4vJHt0cmFja2luZ1Rva2VufS5wbmdgO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2xpY2tUcmFja2luZ1VybCh0cmFja2luZ1Rva2VuOiBzdHJpbmcsIHRhcmdldFVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGVuY29kZWRVcmwgPSBlbmNvZGVVUklDb21wb25lbnQodGFyZ2V0VXJsKTtcclxuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHRoaXMuc2lnblVybCh0cmFja2luZ1Rva2VuLCB0YXJnZXRVcmwpO1xyXG4gICAgcmV0dXJuIGAke3RoaXMuYmFzZVVybH0vZW1haWwvdHJhY2svY2xpY2svJHt0cmFja2luZ1Rva2VufT91cmw9JHtlbmNvZGVkVXJsfSZzaWc9JHtzaWduYXR1cmV9YDtcclxuICB9XHJcblxyXG4gIGluamVjdE9wZW5UcmFja2luZyhodG1sQ29udGVudDogc3RyaW5nLCB0cmFja2luZ1Rva2VuOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgcGl4ZWwgPSBgPGltZyBzcmM9XCIke3RoaXMuZ2V0T3BlblRyYWNraW5nVXJsKHRyYWNraW5nVG9rZW4pfVwiIHdpZHRoPVwiMVwiIGhlaWdodD1cIjFcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIiBhbHQ9XCJcIiAvPmA7XHJcbiAgICBpZiAodHlwZW9mIGh0bWxDb250ZW50ICE9PSAnc3RyaW5nJykgcmV0dXJuIHBpeGVsO1xyXG4gICAgaWYgKGh0bWxDb250ZW50LmluY2x1ZGVzKCc8L2JvZHk+JykpIHtcclxuICAgICAgcmV0dXJuIGh0bWxDb250ZW50LnJlcGxhY2UoJzwvYm9keT4nLCBgJHtwaXhlbH08L2JvZHk+YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaHRtbENvbnRlbnQgKyBwaXhlbDtcclxuICB9XHJcblxyXG4gIGluamVjdENsaWNrVHJhY2tpbmcoaHRtbENvbnRlbnQ6IHN0cmluZywgdHJhY2tpbmdUb2tlbjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh0eXBlb2YgaHRtbENvbnRlbnQgIT09ICdzdHJpbmcnKSByZXR1cm4gaHRtbENvbnRlbnQ7XHJcbiAgICBjb25zdCBocmVmUmVnZXggPSAvaHJlZj1bXCInXShbXlwiJ10rKVtcIiddL2dpO1xyXG4gICAgcmV0dXJuIGh0bWxDb250ZW50LnJlcGxhY2UoaHJlZlJlZ2V4LCAobWF0Y2gsIHVybCkgPT4ge1xyXG4gICAgICBpZiAoIXVybCkgcmV0dXJuIG1hdGNoO1xyXG4gICAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ21haWx0bzonKSB8fCB1cmwuc3RhcnRzV2l0aCgndGVsOicpIHx8IHVybC5zdGFydHNXaXRoKCcjJykpIHJldHVybiBtYXRjaDtcclxuICAgICAgaWYgKHVybC5pbmNsdWRlcygnL2VtYWlsL3RyYWNrL2NsaWNrLycpKSByZXR1cm4gbWF0Y2g7XHJcbiAgICAgIGNvbnN0IHRyYWNrZWRVcmwgPSB0aGlzLmdldENsaWNrVHJhY2tpbmdVcmwodHJhY2tpbmdUb2tlbiwgdXJsKTtcclxuICAgICAgcmV0dXJuIGBocmVmPVwiJHt0cmFja2VkVXJsfVwiYDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkVHJhY2tpbmdUb0VtYWlsKGh0bWxDb250ZW50OiBzdHJpbmcsIHRyYWNraW5nVG9rZW46IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBsZXQgdHJhY2tlZCA9IGh0bWxDb250ZW50O1xyXG4gICAgdHJhY2tlZCA9IHRoaXMuaW5qZWN0Q2xpY2tUcmFja2luZyh0cmFja2VkLCB0cmFja2luZ1Rva2VuKTtcclxuICAgIHRyYWNrZWQgPSB0aGlzLmluamVjdE9wZW5UcmFja2luZyh0cmFja2VkLCB0cmFja2luZ1Rva2VuKTtcclxuICAgIHJldHVybiB0cmFja2VkO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQmFja3dhcmRzLWNvbXBhdGlibGUgaGVscGVycyBmb3IgZXhpc3RpbmcgaW1wb3J0cyBpbiBFbWFpbFNlcnZpY2VcclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRyYWNraW5nVG9FbWFpbChodG1sOiBzdHJpbmcsIHRyYWNraW5nVG9rZW46IHN0cmluZywgYmFzZVVybD86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgLy8gQWxsb3cgZnVuY3Rpb24tc3R5bGUgdXNhZ2UgYnkgY29uc3RydWN0aW5nIGEgbWluaW1hbCB1dGlsIHdpdGggcHJvdmlkZWQgYmFzZVVybFxyXG4gIGNvbnN0IGZha2VDb25maWcgPSB7XHJcbiAgICBnZXQ6IChrZXk6IHN0cmluZykgPT4gKGtleSA9PT0gJ0VNQUlMX1RSQUNLSU5HX1NFQ1JFVCcgPyBwcm9jZXNzLmVudi5FTUFJTF9UUkFDS0lOR19TRUNSRVQgOiBrZXkgPT09ICdFTUFJTF9UUkFDS0lOR19CQVNFX1VSTCcgPyAoYmFzZVVybCB8fCBwcm9jZXNzLmVudi5FTUFJTF9UUkFDS0lOR19CQVNFX1VSTCB8fCBwcm9jZXNzLmVudi5CQVNFX1VSTCkgOiB1bmRlZmluZWQpLFxyXG4gIH0gYXMgdW5rbm93biBhcyBDb25maWdTZXJ2aWNlO1xyXG4gIGNvbnN0IHV0aWwgPSBuZXcgRW1haWxUcmFja2luZ1V0aWwoZmFrZUNvbmZpZyk7XHJcbiAgcmV0dXJuIHV0aWwuYWRkVHJhY2tpbmdUb0VtYWlsKGh0bWwsIHRyYWNraW5nVG9rZW4pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVFbWFpbElkKCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoJ2hleCcpO1xyXG59XHJcblxyXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkVHJhY2tpbmdUb0VtYWlsKGh0bWw6IHN0cmluZywgZW1haWxJZDogc3RyaW5nLCBiYXNlVXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIC8vIEFkZCB0cmFja2luZyBwaXhlbCBmb3Igb3BlbnNcclxuICBjb25zdCB0cmFja2luZ1BpeGVsID0gYDxpbWcgc3JjPVwiJHtiYXNlVXJsfS9lbWFpbC90cmFjay9vcGVuLyR7ZW1haWxJZH1cIiB3aWR0aD1cIjFcIiBoZWlnaHQ9XCIxXCIgYWx0PVwiXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCI+YFxyXG5cclxuICAvLyBBZGQgdHJhY2tpbmcgdG8gYWxsIGxpbmtzXHJcbiAgbGV0IG1vZGlmaWVkSHRtbCA9IGh0bWwucmVwbGFjZSgvPGFcXHMrKD86W14+XSo/XFxzKyk/aHJlZj1bXCInXShbXlwiJ10qKVtcIiddL2dpLCAobWF0Y2gsIHVybCkgPT4ge1xyXG4gICAgLy8gRG9uJ3QgdHJhY2sgdW5zdWJzY3JpYmUgbGlua3NcclxuICAgIGlmICh1cmwuaW5jbHVkZXMoXCIvdW5zdWJzY3JpYmVcIikgfHwgdXJsLmluY2x1ZGVzKFwiL3ByZWZlcmVuY2VzXCIpKSB7XHJcbiAgICAgIHJldHVybiBtYXRjaFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRyYWNraW5nVXJsID0gYCR7YmFzZVVybH0vZW1haWwvdHJhY2svY2xpY2svJHtlbWFpbElkfT91cmw9JHtlbmNvZGVVUklDb21wb25lbnQodXJsKX1gXHJcbiAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSh1cmwsIHRyYWNraW5nVXJsKVxyXG4gIH0pXHJcblxyXG4gIC8vIEFkZCB0cmFja2luZyBwaXhlbCBhdCB0aGUgZW5kIG9mIHRoZSBlbWFpbFxyXG4gIG1vZGlmaWVkSHRtbCA9IG1vZGlmaWVkSHRtbC5yZXBsYWNlKFwiPC9ib2R5PlwiLCBgJHt0cmFja2luZ1BpeGVsfTwvYm9keT5gKVxyXG5cclxuICByZXR1cm4gbW9kaWZpZWRIdG1sXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUVtYWlsSWQoKTogc3RyaW5nIHtcclxuICByZXR1cm4gdXVpZHY0KClcclxufVxyXG5cclxuIl0sInZlcnNpb24iOjN9