4e7c2a5c987544b9ed598646364bd5e1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const config_1 = require("@nestjs/config");
const email_service_1 = require("./email.service");
const email_log_entity_1 = require("./entities/email-log.entity");
const email_preference_entity_1 = require("./entities/email-preference.entity");
const email_template_entity_1 = require("./entities/email-template.entity");
describe('EmailService (tracking)', () => {
    let service;
    let emailLogRepo;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                email_service_1.EmailService,
                { provide: config_1.ConfigService, useValue: { get: jest.fn(() => undefined) } },
                { provide: (0, typeorm_1.getRepositoryToken)(email_template_entity_1.EmailTemplate), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(email_preference_entity_1.EmailPreference), useValue: {} },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(email_log_entity_1.EmailLog),
                    useValue: {
                        findOne: jest.fn(),
                        update: jest.fn(),
                    },
                },
                { provide: 'BullQueue_email', useValue: { add: jest.fn() } },
            ],
        }).compile();
        service = module.get(email_service_1.EmailService);
        emailLogRepo = module.get((0, typeorm_1.getRepositoryToken)(email_log_entity_1.EmailLog));
    });
    describe('markEmailAsOpened', () => {
        it('increments openCount and sets timestamps', async () => {
            const existing = {
                id: '1',
                trackingToken: 'tok',
                openCount: 0,
                firstOpenedAt: null,
            };
            emailLogRepo.findOne.mockResolvedValue(existing);
            emailLogRepo.update.mockResolvedValue({});
            await service.markEmailAsOpened('tok', { userAgent: 'ua', ipAddress: '127.0.0.1' });
            expect(emailLogRepo.update).toHaveBeenCalledWith({ id: '1' }, expect.objectContaining({ openCount: 1, openedAt: expect.any(Date), firstOpenedAt: expect.any(Date) }));
        });
        it('throws for invalid token', async () => {
            emailLogRepo.findOne.mockResolvedValue(null);
            await expect(service.markEmailAsOpened('bad')).rejects.toBeTruthy();
        });
    });
    describe('markEmailAsClicked', () => {
        it('increments clickCount and appends event', async () => {
            const existing = {
                id: '1',
                trackingToken: 'tok',
                clickCount: 0,
                clickEvents: [],
            };
            emailLogRepo.findOne.mockResolvedValue(existing);
            emailLogRepo.update.mockResolvedValue({});
            await service.markEmailAsClicked('tok', 'https://example.com', { userAgent: 'ua', ipAddress: '127.0.0.1' });
            expect(emailLogRepo.update).toHaveBeenCalledWith({ id: '1' }, expect.objectContaining({ clickCount: 1, clickEvents: expect.any(Array) }));
        });
        it('throws for invalid token', async () => {
            emailLogRepo.findOne.mockResolvedValue(null);
            await expect(service.markEmailAsClicked('bad', 'https://x.com')).rejects.toBeTruthy();
        });
    });
    describe('getEmailAnalytics', () => {
        it('returns safe analytics shape', async () => {
            const log = {
                id: '1',
                recipient: 'u@example.com',
                subject: 'Sub',
                createdAt: new Date(),
                firstOpenedAt: null,
                openCount: 0,
                firstClickedAt: new Date(),
                clickCount: 2,
                clickEvents: [{ clickedAt: new Date().toISOString(), url: 'https://x.com' }],
            };
            emailLogRepo.findOne.mockResolvedValue(log);
            const result = await service.getEmailAnalytics('1');
            expect(result).toMatchObject({ id: '1', clicked: true, clickCount: 2 });
            expect(result).not.toHaveProperty('trackingToken');
        });
    });
});
const jwt_1 = require("@nestjs/jwt");
describe('EmailService.verifyUnsubscribeToken', () => {
    let service;
    let config;
    let jwt;
    beforeEach(async () => {
        config = {
            get: jest.fn((key) => {
                if (key === 'UNSUBSCRIBE_JWT_SECRET')
                    return 'secret-x';
                if (key === 'JWT_SECRET')
                    return 'fallback';
                return undefined;
            }),
        };
        jwt = { sign: jest.fn(), verify: jest.fn() };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                email_service_1.EmailService,
                { provide: config_1.ConfigService, useValue: config },
                { provide: 'BullQueue_email', useValue: { add: jest.fn() } },
                { provide: (0, typeorm_1.getRepositoryToken)(email_template_entity_1.EmailTemplate), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(email_log_entity_1.EmailLog), useValue: {} },
                { provide: (0, typeorm_1.getRepositoryToken)(email_preference_entity_1.EmailPreference), useValue: {} },
                { provide: jwt_1.JwtService, useValue: jwt },
            ],
        }).compile();
        service = module.get(email_service_1.EmailService);
    });
    it('returns true when token payload email matches', async () => {
        jwt.verify.mockReturnValue({ email: 'user@example.com' });
        const ok = await service.verifyUnsubscribeToken('user@example.com', 'tok');
        expect(ok).toBe(true);
    });
    it('returns false on invalid token', async () => {
        jwt.verify.mockImplementation(() => { throw new Error('bad'); });
        const ok = await service.verifyUnsubscribeToken('user@example.com', 'tok');
        expect(ok).toBe(false);
    });
});
describe('EmailService', () => {
    let service;
    let mockQueue;
    const mockEmailTemplateRepo = {
        findOne: jest.fn(),
    };
    const mockEmailLogRepo = {
        create: jest.fn().mockImplementation((data) => data),
        save: jest.fn(),
        update: jest.fn(),
        findOne: jest.fn(),
    };
    const mockEmailPreferenceRepo = {
        findOne: jest.fn(),
        find: jest.fn(),
        create: jest.fn(),
        save: jest.fn(),
    };
    beforeEach(async () => {
        mockQueue = {
            add: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                email_service_1.EmailService,
                { provide: config_1.ConfigService, useValue: { get: jest.fn(() => 'mock') } },
                { provide: (0, typeorm_1.getRepositoryToken)(email_template_entity_1.EmailTemplate), useValue: mockEmailTemplateRepo },
                { provide: (0, typeorm_1.getRepositoryToken)(email_log_entity_1.EmailLog), useValue: mockEmailLogRepo },
                { provide: (0, typeorm_1.getRepositoryToken)(email_preference_entity_1.EmailPreference), useValue: mockEmailPreferenceRepo },
                { provide: 'BullQueue_email', useValue: mockQueue },
            ],
        }).compile();
        service = module.get(email_service_1.EmailService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('sendEmail', () => {
        it('should queue the email if user has not opted out', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue(null);
            const result = await service.sendEmail({
                to: 'user@example.com',
                subject: 'Test',
                templateName: 'email-verification',
                context: {},
            });
            expect(result).toBe(true);
            expect(mockQueue.add).toHaveBeenCalled();
        });
        it('should not send email if user has opted out', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue({ optOut: true });
            const result = await service.sendEmail({
                to: 'user@example.com',
                subject: 'Test',
                templateName: 'email-verification',
                context: {},
            });
            expect(result).toBe(false);
            expect(mockQueue.add).not.toHaveBeenCalled();
        });
    });
    describe('updateEmailPreference', () => {
        it('should create a new preference if none exists', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue(null);
            await service.updateEmailPreference('user@example.com', 'email-verification', true);
            expect(mockEmailPreferenceRepo.create).toHaveBeenCalled();
            expect(mockEmailPreferenceRepo.save).toHaveBeenCalled();
        });
        it('should update existing preference', async () => {
            mockEmailPreferenceRepo.findOne.mockResolvedValue({ email: 'user@example.com', optOut: false });
            await service.updateEmailPreference('user@example.com', 'email-verification', true);
            expect(mockEmailPreferenceRepo.save).toHaveBeenCalled();
        });
    });
    describe('getTemplate', () => {
        it('should fetch template from database if exists', async () => {
            mockEmailTemplateRepo.findOne.mockResolvedValue({ content: '<p>Hello</p>' });
            const template = await service.getTemplate('email-verification');
            expect(template).toBe('<p>Hello</p>');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,