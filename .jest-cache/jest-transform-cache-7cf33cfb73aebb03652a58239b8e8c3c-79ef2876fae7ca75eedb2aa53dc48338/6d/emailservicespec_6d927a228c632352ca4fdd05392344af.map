{"file":"C:\\Users\\ojoseph\\Documents\\StrellerMinds-Backend\\src\\email\\email.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\ojoseph\\Documents\\StrellerMinds-Backend\\src\\email\\email.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { EmailService } from './email.service';\r\nimport { EmailLog } from './entities/email-log.entity';\r\nimport { EmailPreference } from './entities/email-preference.entity';\r\nimport { EmailTemplate } from './entities/email-template.entity';\r\n\r\ndescribe('EmailService (tracking)', () => {\r\n  let service: EmailService;\r\n  let emailLogRepo: jest.Mocked<Repository<EmailLog>>;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        EmailService,\r\n        { provide: ConfigService, useValue: { get: jest.fn(() => undefined) } },\r\n        { provide: getRepositoryToken(EmailTemplate), useValue: {} },\r\n        { provide: getRepositoryToken(EmailPreference), useValue: {} },\r\n        {\r\n          provide: getRepositoryToken(EmailLog),\r\n          useValue: {\r\n            findOne: jest.fn(),\r\n            update: jest.fn(),\r\n          },\r\n        },\r\n        { provide: 'BullQueue_email', useValue: { add: jest.fn() } },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<EmailService>(EmailService);\r\n    emailLogRepo = module.get(getRepositoryToken(EmailLog));\r\n  });\r\n\r\n  describe('markEmailAsOpened', () => {\r\n    it('increments openCount and sets timestamps', async () => {\r\n      const existing: Partial<EmailLog> = {\r\n        id: '1',\r\n        trackingToken: 'tok',\r\n        openCount: 0,\r\n        firstOpenedAt: null,\r\n      } as any;\r\n      emailLogRepo.findOne.mockResolvedValue(existing as EmailLog);\r\n      emailLogRepo.update.mockResolvedValue({} as any);\r\n\r\n      await service.markEmailAsOpened('tok', { userAgent: 'ua', ipAddress: '127.0.0.1' });\r\n\r\n      expect(emailLogRepo.update).toHaveBeenCalledWith(\r\n        { id: '1' },\r\n        expect.objectContaining({ openCount: 1, openedAt: expect.any(Date), firstOpenedAt: expect.any(Date) }),\r\n      );\r\n    });\r\n\r\n    it('throws for invalid token', async () => {\r\n      emailLogRepo.findOne.mockResolvedValue(null);\r\n      await expect(service.markEmailAsOpened('bad')).rejects.toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe('markEmailAsClicked', () => {\r\n    it('increments clickCount and appends event', async () => {\r\n      const existing: Partial<EmailLog> = {\r\n        id: '1',\r\n        trackingToken: 'tok',\r\n        clickCount: 0,\r\n        clickEvents: [],\r\n      } as any;\r\n      emailLogRepo.findOne.mockResolvedValue(existing as EmailLog);\r\n      emailLogRepo.update.mockResolvedValue({} as any);\r\n\r\n      await service.markEmailAsClicked('tok', 'https://example.com', { userAgent: 'ua', ipAddress: '127.0.0.1' });\r\n\r\n      expect(emailLogRepo.update).toHaveBeenCalledWith(\r\n        { id: '1' },\r\n        expect.objectContaining({ clickCount: 1, clickEvents: expect.any(Array) }),\r\n      );\r\n    });\r\n\r\n    it('throws for invalid token', async () => {\r\n      emailLogRepo.findOne.mockResolvedValue(null);\r\n      await expect(service.markEmailAsClicked('bad', 'https://x.com')).rejects.toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe('getEmailAnalytics', () => {\r\n    it('returns safe analytics shape', async () => {\r\n      const log: Partial<EmailLog> = {\r\n        id: '1',\r\n        recipient: 'u@example.com',\r\n        subject: 'Sub',\r\n        createdAt: new Date(),\r\n        firstOpenedAt: null,\r\n        openCount: 0,\r\n        firstClickedAt: new Date(),\r\n        clickCount: 2,\r\n        clickEvents: [{ clickedAt: new Date().toISOString(), url: 'https://x.com' }],\r\n      } as any;\r\n      emailLogRepo.findOne.mockResolvedValue(log as EmailLog);\r\n      const result = await service.getEmailAnalytics('1');\r\n      expect(result).toMatchObject({ id: '1', clicked: true, clickCount: 2 });\r\n      expect(result).not.toHaveProperty('trackingToken');\r\n    });\r\n  });\r\n});\r\n\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { EmailService } from './email.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { EmailTemplate } from './entities/email-template.entity';\r\nimport { EmailLog } from './entities/email-log.entity';\r\nimport { EmailPreference } from './entities/email-preference.entity';\r\nimport { Queue } from 'bull';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\ndescribe('EmailService.verifyUnsubscribeToken', () => {\r\n  let service: EmailService;\r\n  let config: Partial<ConfigService>;\r\n  let jwt: { sign: jest.Mock; verify: jest.Mock };\r\n\r\n  beforeEach(async () => {\r\n    config = {\r\n      get: jest.fn((key: string) => {\r\n        if (key === 'UNSUBSCRIBE_JWT_SECRET') return 'secret-x';\r\n        if (key === 'JWT_SECRET') return 'fallback';\r\n        return undefined;\r\n      }),\r\n    } as any;\r\n\r\n    jwt = { sign: jest.fn(), verify: jest.fn() };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        EmailService,\r\n        { provide: ConfigService, useValue: config },\r\n        { provide: 'BullQueue_email', useValue: { add: jest.fn() } as Partial<Queue> },\r\n        { provide: getRepositoryToken(EmailTemplate), useValue: {} },\r\n        { provide: getRepositoryToken(EmailLog), useValue: {} },\r\n        { provide: getRepositoryToken(EmailPreference), useValue: {} },\r\n        { provide: JwtService, useValue: jwt },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get(EmailService);\r\n  });\r\n\r\n  it('returns true when token payload email matches', async () => {\r\n    jwt.verify.mockReturnValue({ email: 'user@example.com' });\r\n    const ok = await service.verifyUnsubscribeToken('user@example.com', 'tok');\r\n    expect(ok).toBe(true);\r\n  });\r\n\r\n  it('returns false on invalid token', async () => {\r\n    jwt.verify.mockImplementation(() => { throw new Error('bad'); });\r\n    const ok = await service.verifyUnsubscribeToken('user@example.com', 'tok');\r\n    expect(ok).toBe(false);\r\n  });\r\n});\r\n\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { EmailService } from './email.service';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { EmailTemplate } from './entities/email-template.entity';\r\nimport { EmailLog } from './entities/email-log.entity';\r\nimport { EmailPreference } from './entities/email-preference.entity';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { Queue } from 'bull';\r\n\r\ndescribe('EmailService', () => {\r\n  let service: EmailService;\r\n  let mockQueue: Queue;\r\n\r\n  const mockEmailTemplateRepo = {\r\n    findOne: jest.fn(),\r\n  };\r\n  const mockEmailLogRepo = {\r\n    create: jest.fn().mockImplementation((data) => data),\r\n    save: jest.fn(),\r\n    update: jest.fn(),\r\n    findOne: jest.fn(),\r\n  };\r\n  const mockEmailPreferenceRepo = {\r\n    findOne: jest.fn(),\r\n    find: jest.fn(),\r\n    create: jest.fn(),\r\n    save: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    mockQueue = {\r\n      add: jest.fn(),\r\n    } as any;\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        EmailService,\r\n        { provide: ConfigService, useValue: { get: jest.fn(() => 'mock') } },\r\n        { provide: getRepositoryToken(EmailTemplate), useValue: mockEmailTemplateRepo },\r\n        { provide: getRepositoryToken(EmailLog), useValue: mockEmailLogRepo },\r\n        { provide: getRepositoryToken(EmailPreference), useValue: mockEmailPreferenceRepo },\r\n        { provide: 'BullQueue_email', useValue: mockQueue },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<EmailService>(EmailService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('sendEmail', () => {\r\n    it('should queue the email if user has not opted out', async () => {\r\n      mockEmailPreferenceRepo.findOne.mockResolvedValue(null);\r\n      const result = await service.sendEmail({\r\n        to: 'user@example.com',\r\n        subject: 'Test',\r\n        templateName: 'email-verification',\r\n        context: {},\r\n      });\r\n      expect(result).toBe(true);\r\n      expect(mockQueue.add).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not send email if user has opted out', async () => {\r\n      mockEmailPreferenceRepo.findOne.mockResolvedValue({ optOut: true });\r\n      const result = await service.sendEmail({\r\n        to: 'user@example.com',\r\n        subject: 'Test',\r\n        templateName: 'email-verification',\r\n        context: {},\r\n      });\r\n      expect(result).toBe(false);\r\n      expect(mockQueue.add).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('updateEmailPreference', () => {\r\n    it('should create a new preference if none exists', async () => {\r\n      mockEmailPreferenceRepo.findOne.mockResolvedValue(null);\r\n      await service.updateEmailPreference('user@example.com', 'email-verification', true);\r\n      expect(mockEmailPreferenceRepo.create).toHaveBeenCalled();\r\n      expect(mockEmailPreferenceRepo.save).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should update existing preference', async () => {\r\n      mockEmailPreferenceRepo.findOne.mockResolvedValue({ email: 'user@example.com', optOut: false });\r\n      await service.updateEmailPreference('user@example.com', 'email-verification', true);\r\n      expect(mockEmailPreferenceRepo.save).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('getTemplate', () => {\r\n    it('should fetch template from database if exists', async () => {\r\n      mockEmailTemplateRepo.findOne.mockResolvedValue({ content: '<p>Hello</p>' });\r\n      const template = await service.getTemplate('email-verification');\r\n      expect(template).toBe('<p>Hello</p>');\r\n    });\r\n  });\r\n});\r\n"],"version":3}