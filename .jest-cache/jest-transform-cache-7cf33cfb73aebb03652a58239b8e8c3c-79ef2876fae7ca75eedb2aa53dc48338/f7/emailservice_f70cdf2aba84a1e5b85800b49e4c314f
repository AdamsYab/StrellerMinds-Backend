4c795fec7eea899de63cfcffcef467ed
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var EmailService_1;
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = void 0;
/**
 * EmailService provides logic for sending emails, managing preferences, analytics, and tracking.
 */
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const bull_1 = require("@nestjs/bull");
const bull_2 = require("bull");
const config_1 = require("@nestjs/config");
const nodemailer = __importStar(require("nodemailer"));
const Handlebars = __importStar(require("handlebars"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const email_template_entity_1 = require("./entities/email-template.entity");
const email_log_entity_1 = require("./entities/email-log.entity");
const email_preference_entity_1 = require("./entities/email-preference.entity");
const tracking_util_1 = require("./utils/tracking.util");
const jwt_1 = require("@nestjs/jwt");
var EmailType;
(function (EmailType) {
    EmailType["VERIFICATION"] = "email-verification";
    EmailType["ENROLLMENT"] = "course-enrollment";
    EmailType["COMPLETION"] = "course-completion";
    EmailType["FORUM"] = "forum-notification";
})(EmailType || (EmailType = {}));
let EmailService = EmailService_1 = class EmailService {
    constructor(configService, emailQueue, emailTemplateRepository, emailLogRepository, emailPreferenceRepository, jwtService) {
        this.configService = configService;
        this.emailQueue = emailQueue;
        this.emailTemplateRepository = emailTemplateRepository;
        this.emailLogRepository = emailLogRepository;
        this.emailPreferenceRepository = emailPreferenceRepository;
        this.jwtService = jwtService;
        this.logger = new common_1.Logger(EmailService_1.name);
        this.initializeTransporter();
    }
    /**
     * Initialize the nodemailer transporter using config values.
     */
    initializeTransporter() {
        this.transporter = nodemailer.createTransport({
            host: this.configService.get('EMAIL_HOST'),
            port: this.configService.get('EMAIL_PORT'),
            secure: this.configService.get('EMAIL_SECURE', false),
            auth: {
                user: this.configService.get('EMAIL_USER'),
                pass: this.configService.get('EMAIL_PASSWORD'),
            },
        });
    }
    /**
     * Send an email using the specified options. Queues the email for sending.
     * @param options - Email options
     * @returns True if the email was successfully queued, false otherwise
     */
    async sendEmail(options) {
        const emailEnabled = this.configService.get('EMAIL_ENABLED');
        if (emailEnabled === 'false' || emailEnabled === '0') {
            this.logger.log('Email sending is disabled by EMAIL_ENABLED flag. Skipping email.');
            return false;
        }
        try {
            if (await this.hasUserOptedOut(options.to, options.templateName)) {
                this.logger.log(`User ${options.to} has opted out of ${options.templateName} emails`);
                return false;
            }
            await this.emailQueue.add('send', options, {
                attempts: 3,
                backoff: {
                    type: 'exponential',
                    delay: 5000,
                },
            });
            return true;
        }
        catch (error) {
            this.logger.error(`Failed to queue email: ${error.message}`, error.stack);
            return false;
        }
    }
    /**
     * Send an email immediately using the specified options. Bypasses the queue.
     * @param options - Email options
     * @returns True if the email was successfully sent, false otherwise
     */
    async sendImmediate(options) {
        const emailEnabled = this.configService.get('EMAIL_ENABLED');
        if (emailEnabled === 'false' || emailEnabled === '0') {
            this.logger.log('Email sending is disabled by EMAIL_ENABLED flag. Skipping immediate email.');
            return false;
        }
        try {
            const template = await this.getTemplate(options.templateName);
            const compiledTemplate = Handlebars.compile(template);
            let html = compiledTemplate(options.context);
            const emailId = (0, tracking_util_1.generateEmailId)();
            if (!options.skipTracking) {
                const baseUrl = this.configService.get('BASE_URL');
                html = (0, tracking_util_1.addTrackingToEmail)(html, emailId, baseUrl);
            }
            const mailOptions = {
                from: this.configService.get('EMAIL_FROM'),
                to: options.to,
                cc: options.cc,
                bcc: options.bcc,
                subject: options.subject,
                html,
                attachments: options.attachments || [],
            };
            const info = await this.transporter.sendMail(mailOptions);
            await this.logEmail({
                id: emailId,
                recipient: Array.isArray(options.to) ? options.to.join(', ') : options.to,
                subject: options.subject,
                templateName: options.templateName,
                messageId: info.messageId,
                status: 'sent',
                // tracking
                trackingEnabled: !options.skipTracking,
                trackingToken: !options.skipTracking ? emailId : null,
            });
            return true;
        }
        catch (error) {
            this.logger.error(`Failed to send email: ${error.message}`, error.stack);
            await this.logEmail({
                recipient: Array.isArray(options.to) ? options.to.join(', ') : options.to,
                subject: options.subject,
                templateName: options.templateName,
                status: 'failed',
                error: error.message,
            });
            return false;
        }
    }
    /**
     * Get the email template content by name. First checks the database, then falls back to file system.
     * @param templateName - Name of the template
     * @returns The template content
     */
    async getTemplate(templateName) {
        const dbTemplate = await this.emailTemplateRepository.findOne({ where: { name: templateName } });
        if (dbTemplate)
            return dbTemplate.content;
        const templatePath = path.join(process.cwd(), 'src/email/templates', `${templateName}.hbs`);
        return fs.readFileSync(templatePath, 'utf8');
    }
    /**
     * Log an email event to the database.
     * @param logData - Partial email log data
     */
    async logEmail(logData) {
        const log = this.emailLogRepository.create(logData);
        await this.emailLogRepository.save(log);
    }
    /**
     * Check if a user has opted out of a specific email type.
     * @param recipient - Recipient email address
     * @param templateType - Email template type
     * @returns True if the user has opted out, false otherwise
     */
    async hasUserOptedOut(recipient, templateType) {
        if (Array.isArray(recipient)) {
            for (const email of recipient) {
                const preference = await this.emailPreferenceRepository.findOne({ where: { email, optOut: true } });
                if (preference)
                    return true;
            }
            return false;
        }
        const preference = await this.emailPreferenceRepository.findOne({ where: { email: recipient, optOut: true } });
        return !!preference;
    }
    /**
     * Update a user's email preference for a specific email type.
     * @param email - User email address
     * @param emailType - Type of email
     * @param optOut - Whether the user opts out
     * @returns The updated EmailPreference entity
     */
    async updateEmailPreference(email, emailType, optOut) {
        let preference = await this.emailPreferenceRepository.findOne({ where: { email } });
        if (preference) {
            preference.optOut = optOut;
        }
        else {
            preference = this.emailPreferenceRepository.create({ email, optOut });
        }
        return this.emailPreferenceRepository.save(preference);
    }
    /**
     * Get email analytics for a date range and optional template name.
     * @param startDate - Start date
     * @param endDate - End date
     * @param templateName - Optional template name
     * @returns Analytics data
     */
    async getEmailAnalytics(startDate, endDate, templateName) {
        const query = this.emailLogRepository
            .createQueryBuilder('log')
            .select('log.templateName', 'templateName')
            .addSelect('COUNT(*)', 'count')
            .addSelect('log.status', 'status')
            .where('log.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate })
            .groupBy('log.templateName')
            .addGroupBy('log.status');
        if (templateName) {
            query.andWhere('log.templateName = :templateName', { templateName });
        }
        return query.getRawMany();
    }
    /**
     * Send a verification email to the user.
     * @param user - User object
     * @param verificationCode - Verification code
     * @param verificationToken - Verification token
     * @returns True if the email was successfully sent, false otherwise
     */
    async sendVerificationEmail(user, verificationCode, verificationToken) {
        const verificationUrl = `${this.configService.get('FRONTEND_URL')}/verify-email?token=${verificationToken}`;
        const unsubscribeUrl = `${this.configService.get('FRONTEND_URL')}/preferences?email=${user.email}`;
        return this.sendEmail({
            to: user.email,
            subject: 'Verify Your Email Address',
            templateName: 'email-verification',
            context: {
                name: user.name,
                verificationUrl,
                verificationCode,
                expiryTime: 24,
                unsubscribeUrl,
                year: new Date().getFullYear(),
            },
        });
    }
    /**
     * Send a course enrollment email to the user.
     * @param user - User object
     * @param course - Course object
     * @returns True if the email was successfully sent, false otherwise
     */
    async sendCourseEnrollmentEmail(user, course) {
        const courseUrl = `${this.configService.get('FRONTEND_URL')}/courses/${course.id}`;
        const unsubscribeUrl = `${this.configService.get('FRONTEND_URL')}/preferences?email=${user.email}`;
        return this.sendEmail({
            to: user.email,
            subject: `Enrollment Confirmation: ${course.name}`,
            templateName: 'course-enrollment',
            context: {
                name: user.name,
                courseName: course.name,
                instructorName: course.instructor.name,
                startDate: new Date(course.startDate).toLocaleDateString(),
                duration: course.duration,
                courseUrl,
                unsubscribeUrl,
                year: new Date().getFullYear(),
            },
        });
    }
    /**
     * Send a course completion email to the user.
     * @param user - User object
     * @param course - Course object
     * @param score - Completion score
     * @returns True if the email was successfully sent, false otherwise
     */
    async sendCourseCompletionEmail(user, course, score) {
        const certificateUrl = `${this.configService.get('FRONTEND_URL')}/certificates/${course.id}`;
        const courseCatalogUrl = `${this.configService.get('FRONTEND_URL')}/courses`;
        const unsubscribeUrl = `${this.configService.get('FRONTEND_URL')}/preferences?email=${user.email}`;
        return this.sendEmail({
            to: user.email,
            subject: `Congratulations on Completing ${course.name}!`,
            templateName: 'course-completion',
            context: {
                name: user.name,
                courseName: course.name,
                score,
                completionDate: new Date().toLocaleDateString(),
                certificateUrl,
                courseCatalogUrl,
                unsubscribeUrl,
                year: new Date().getFullYear(),
            },
        });
    }
    /**
     * Send a forum notification email to the user.
     * @param user - User object
     * @param notification - Notification object
     * @returns True if the email was successfully sent, false otherwise
     */
    async sendForumNotificationEmail(user, notification) {
        const postUrl = `${this.configService.get('FRONTEND_URL')}/forum/posts/${notification.postId}`;
        const unsubscribeUrl = `${this.configService.get('FRONTEND_URL')}/preferences?email=${user.email}`;
        return this.sendEmail({
            to: user.email,
            subject: `Forum Notification: ${notification.type}`,
            templateName: 'forum-notification',
            context: {
                name: user.name,
                notificationType: notification.type,
                notificationMessage: notification.message,
                postAuthor: notification.post.author.name,
                postDate: new Date(notification.post.createdAt).toLocaleDateString(),
                postContent: notification.post.content,
                postUrl,
                unsubscribeUrl,
                year: new Date().getFullYear(),
            },
        });
    }
    /**
     * Mark an email as clicked by its log ID.
     * @param id - Email log ID
     * @param url - URL that was clicked
     */
    async markEmailAsClicked(trackingToken, url, metadata) {
        const emailLog = await this.emailLogRepository.findOne({ where: { trackingToken } });
        if (!emailLog) {
            throw new common_1.NotFoundException('Email tracking token not found');
        }
        const now = new Date();
        const events = Array.isArray(emailLog.clickEvents) ? emailLog.clickEvents.slice() : [];
        events.push({
            clickedAt: now.toISOString(),
            url,
            userAgent: metadata?.userAgent,
            ipAddress: metadata?.ipAddress,
        });
        const updates = {
            clickCount: (emailLog.clickCount || 0) + 1,
            clickEvents: events,
        };
        if (!emailLog.firstClickedAt) {
            updates.firstClickedAt = now;
        }
        await this.emailLogRepository.update({ id: emailLog.id }, updates);
        this.logger.log(`Email link clicked: ${trackingToken} -> ${url}`);
    }
    /**
     * Mark an email as opened by its log ID.
     * @param id - Email log ID
     */
    async markEmailAsOpened(trackingToken, metadata) {
        const emailLog = await this.emailLogRepository.findOne({ where: { trackingToken } });
        if (!emailLog) {
            throw new common_1.NotFoundException('Email tracking token not found');
        }
        const now = new Date();
        const updates = {
            openedAt: now,
            openCount: (emailLog.openCount || 0) + 1,
        };
        if (!emailLog.firstOpenedAt) {
            updates.firstOpenedAt = now;
        }
        await this.emailLogRepository.update({ id: emailLog.id }, updates);
        this.logger.log(`Email opened: ${trackingToken}`);
    }
    /**
     * Get analytics for a specific email log
     */
    async getEmailAnalytics(emailId) {
        const emailLog = await this.emailLogRepository.findOne({ where: { id: emailId } });
        if (!emailLog) {
            throw new common_1.NotFoundException('Email not found');
        }
        return {
            id: emailLog.id,
            to: emailLog.recipient,
            subject: emailLog.subject,
            sentAt: emailLog.createdAt,
            opened: !!emailLog.firstOpenedAt,
            openedAt: emailLog.firstOpenedAt,
            openCount: emailLog.openCount || 0,
            clicked: !!emailLog.firstClickedAt,
            firstClickedAt: emailLog.firstClickedAt,
            clickCount: emailLog.clickCount || 0,
            clicks: emailLog.clickEvents || [],
        };
    }
    /**
     * Verify the unsubscribe token for a given email.
     * @param email - User email address
     * @param token - Unsubscribe token
     * @returns True if the token is valid, false otherwise
     */
    async verifyUnsubscribeToken(email, token) {
        try {
            const secret = this.configService.get('UNSUBSCRIBE_JWT_SECRET') || this.configService.get('JWT_SECRET');
            const payload = (this.jwtService
                ? this.jwtService.verify(token, { secret })
                : (await Promise.resolve().then(() => __importStar(require('jsonwebtoken')))).verify(token, secret));
            return !!payload && (payload.email === email || payload.sub === email);
        }
        catch (err) {
            this.logger.warn(`Invalid unsubscribe token for ${email}: ${err?.message}`);
            return false;
        }
    }
    /**
     * Get daily email statistics for a date range and optional template name.
     * @param start - Start date
     * @param end - End date
     * @param templateName - Optional template name
     * @returns Daily email statistics
     */
    async getDailyEmailStats(start, end, templateName) {
        // Implement your logic here or return a mock for now
        return [];
    }
    /**
     * Get the user's email preferences for all email types.
     * @param email - User email address
     * @returns Array of email preferences
     */
    async getUserPreferences(email) {
        const preferences = await this.emailPreferenceRepository.find({ where: { email } });
        return Object.values(EmailType).map((type) => {
            const preference = preferences.find((p) => p.email === email && p.optOut);
            return {
                emailType: type,
                optedOut: !!preference,
            };
        });
    }
};
exports.EmailService = EmailService;
exports.EmailService = EmailService = EmailService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, bull_1.InjectQueue)('email')),
    __param(2, (0, typeorm_1.InjectRepository)(email_template_entity_1.EmailTemplate)),
    __param(3, (0, typeorm_1.InjectRepository)(email_log_entity_1.EmailLog)),
    __param(4, (0, typeorm_1.InjectRepository)(email_preference_entity_1.EmailPreference)),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof bull_2.Queue !== "undefined" && bull_2.Queue) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object, typeof (_f = typeof jwt_1.JwtService !== "undefined" && jwt_1.JwtService) === "function" ? _f : Object])
], EmailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,