{"file":"/Users/macbookpro/StrellerMinds-Backend/test/setup/jest.setup.ts","mappings":"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","names":[],"sources":["/Users/macbookpro/StrellerMinds-Backend/test/setup/jest.setup.ts"],"sourcesContent":["import 'reflect-metadata';\nimport { config } from 'dotenv';\nimport { DataSource } from 'typeorm';\nimport { TestingModule } from '@nestjs/testing';\n\n// Load test environment variables\nconfig({ path: '.env.test' });\n\n// Global test configuration\nglobal.console = {\n  ...console,\n  // Suppress console.log in tests unless explicitly needed\n  log: process.env.JEST_VERBOSE === 'true' ? console.log : jest.fn(),\n  debug: process.env.JEST_VERBOSE === 'true' ? console.debug : jest.fn(),\n  info: process.env.JEST_VERBOSE === 'true' ? console.info : jest.fn(),\n  warn: console.warn,\n  error: console.error,\n};\n\n// Global test timeout\njest.setTimeout(30000);\n\n// Mock external services by default\njest.mock('nodemailer', () => ({\n  createTransport: jest.fn(() => ({\n    sendMail: jest.fn().mockResolvedValue({ messageId: 'test-message-id' }),\n    verify: jest.fn().mockResolvedValue(true),\n  })),\n}));\n\njest.mock('@aws-sdk/client-s3', () => ({\n  S3Client: jest.fn(() => ({\n    send: jest.fn(),\n  })),\n  PutObjectCommand: jest.fn(),\n  GetObjectCommand: jest.fn(),\n  DeleteObjectCommand: jest.fn(),\n  HeadObjectCommand: jest.fn(),\n}));\n\njest.mock('@aws-sdk/client-cloudfront', () => ({\n  CloudFrontClient: jest.fn(() => ({\n    send: jest.fn(),\n  })),\n  CreateInvalidationCommand: jest.fn(),\n  GetDistributionCommand: jest.fn(),\n}));\n\njest.mock('stripe', () => ({\n  __esModule: true,\n  default: jest.fn(() => ({\n    customers: {\n      create: jest.fn(),\n      retrieve: jest.fn(),\n      update: jest.fn(),\n      del: jest.fn(),\n    },\n    paymentIntents: {\n      create: jest.fn(),\n      retrieve: jest.fn(),\n      confirm: jest.fn(),\n      cancel: jest.fn(),\n    },\n    subscriptions: {\n      create: jest.fn(),\n      retrieve: jest.fn(),\n      update: jest.fn(),\n      del: jest.fn(),\n    },\n    webhooks: {\n      constructEvent: jest.fn(),\n    },\n  })),\n}));\n\n// Global test database connection\nlet testDataSource: DataSource;\n\n// Setup and teardown hooks\nbeforeAll(async () => {\n  // Initialize test database connection if needed\n  if (process.env.DATABASE_URL) {\n    // Database setup would go here\n  }\n});\n\nafterAll(async () => {\n  // Cleanup test database connection\n  if (testDataSource && testDataSource.isInitialized) {\n    await testDataSource.destroy();\n  }\n});\n\nbeforeEach(() => {\n  // Clear all mocks before each test\n  jest.clearAllMocks();\n});\n\nafterEach(() => {\n  // Additional cleanup after each test\n  jest.restoreAllMocks();\n});\n\n// Global test utilities\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeValidUUID(): R;\n      toBeValidEmail(): R;\n      toBeValidDate(): R;\n      toHaveValidationError(field: string): R;\n      toMatchApiResponse(): R;\n    }\n  }\n  \n  var testUtils: {\n    createTestingModule: (metadata: any) => Promise<TestingModule>;\n    createMockRepository: () => any;\n    createMockService: (methods: string[]) => any;\n    generateTestData: (type: string, overrides?: any) => any;\n    cleanupDatabase: () => Promise<void>;\n  };\n}\n\n// Export test utilities\nglobal.testUtils = {\n  createTestingModule: async (metadata: any): Promise<TestingModule> => {\n    const { Test } = await import('@nestjs/testing');\n    return Test.createTestingModule(metadata).compile();\n  },\n\n  createMockRepository: () => ({\n    find: jest.fn(),\n    findOne: jest.fn(),\n    findOneBy: jest.fn(),\n    findAndCount: jest.fn(),\n    create: jest.fn(),\n    save: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    remove: jest.fn(),\n    count: jest.fn(),\n    increment: jest.fn(),\n    decrement: jest.fn(),\n    createQueryBuilder: jest.fn(() => ({\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      orWhere: jest.fn().mockReturnThis(),\n      orderBy: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      offset: jest.fn().mockReturnThis(),\n      skip: jest.fn().mockReturnThis(),\n      take: jest.fn().mockReturnThis(),\n      leftJoin: jest.fn().mockReturnThis(),\n      leftJoinAndSelect: jest.fn().mockReturnThis(),\n      innerJoin: jest.fn().mockReturnThis(),\n      innerJoinAndSelect: jest.fn().mockReturnThis(),\n      select: jest.fn().mockReturnThis(),\n      addSelect: jest.fn().mockReturnThis(),\n      groupBy: jest.fn().mockReturnThis(),\n      having: jest.fn().mockReturnThis(),\n      getOne: jest.fn(),\n      getMany: jest.fn(),\n      getManyAndCount: jest.fn(),\n      getCount: jest.fn(),\n      getRawOne: jest.fn(),\n      getRawMany: jest.fn(),\n      execute: jest.fn(),\n    })),\n  }),\n\n  createMockService: (methods: string[]) => {\n    const mockService = {};\n    methods.forEach(method => {\n      mockService[method] = jest.fn();\n    });\n    return mockService;\n  },\n\n  generateTestData: (type: string, overrides: any = {}) => {\n    // This will be implemented with factories\n    return { ...overrides };\n  },\n\n  cleanupDatabase: async () => {\n    // Database cleanup implementation\n    if (testDataSource && testDataSource.isInitialized) {\n      // Clean up test data\n    }\n  },\n};\n\n// Environment validation\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = 'test';\n}\n\nif (process.env.NODE_ENV !== 'test') {\n  throw new Error('Tests must be run with NODE_ENV=test');\n}\n"],"version":3}