62fd3e478ea83bf0acc37ca192460a86
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external services by default
jest.mock('nodemailer', () => ({
    createTransport: jest.fn(() => ({
        sendMail: jest.fn().mockResolvedValue({ messageId: 'test-message-id' }),
        verify: jest.fn().mockResolvedValue(true),
    })),
}));
jest.mock('@aws-sdk/client-s3', () => ({
    S3Client: jest.fn(() => ({
        send: jest.fn(),
    })),
    PutObjectCommand: jest.fn(),
    GetObjectCommand: jest.fn(),
    DeleteObjectCommand: jest.fn(),
    HeadObjectCommand: jest.fn(),
}));
jest.mock('@aws-sdk/client-cloudfront', () => ({
    CloudFrontClient: jest.fn(() => ({
        send: jest.fn(),
    })),
    CreateInvalidationCommand: jest.fn(),
    GetDistributionCommand: jest.fn(),
}));
jest.mock('stripe', () => ({
    __esModule: true,
    default: jest.fn(() => ({
        customers: {
            create: jest.fn(),
            retrieve: jest.fn(),
            update: jest.fn(),
            del: jest.fn(),
        },
        paymentIntents: {
            create: jest.fn(),
            retrieve: jest.fn(),
            confirm: jest.fn(),
            cancel: jest.fn(),
        },
        subscriptions: {
            create: jest.fn(),
            retrieve: jest.fn(),
            update: jest.fn(),
            del: jest.fn(),
        },
        webhooks: {
            constructEvent: jest.fn(),
        },
    })),
}));
require("reflect-metadata");
const dotenv_1 = require("dotenv");
// Load test environment variables
(0, dotenv_1.config)({ path: '.env.test' });
// Global test configuration
global.console = {
    ...console,
    // Suppress console.log in tests unless explicitly needed
    log: process.env.JEST_VERBOSE === 'true' ? console.log : jest.fn(),
    debug: process.env.JEST_VERBOSE === 'true' ? console.debug : jest.fn(),
    info: process.env.JEST_VERBOSE === 'true' ? console.info : jest.fn(),
    warn: console.warn,
    error: console.error,
};
// Global test timeout
jest.setTimeout(30000);
// Global test database connection
let testDataSource;
// Setup and teardown hooks
beforeAll(async () => {
    // Initialize test database connection if needed
    if (process.env.DATABASE_URL) {
        // Database setup would go here
    }
});
afterAll(async () => {
    // Cleanup test database connection
    if (testDataSource && testDataSource.isInitialized) {
        await testDataSource.destroy();
    }
});
beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
});
afterEach(() => {
    // Additional cleanup after each test
    jest.restoreAllMocks();
});
// Export test utilities
global.testUtils = {
    createTestingModule: async (metadata) => {
        const { Test } = await Promise.resolve().then(() => __importStar(require('@nestjs/testing')));
        return Test.createTestingModule(metadata).compile();
    },
    createMockRepository: () => ({
        find: jest.fn(),
        findOne: jest.fn(),
        findOneBy: jest.fn(),
        findAndCount: jest.fn(),
        create: jest.fn(),
        save: jest.fn(),
        update: jest.fn(),
        delete: jest.fn(),
        remove: jest.fn(),
        count: jest.fn(),
        increment: jest.fn(),
        decrement: jest.fn(),
        createQueryBuilder: jest.fn(() => ({
            where: jest.fn().mockReturnThis(),
            andWhere: jest.fn().mockReturnThis(),
            orWhere: jest.fn().mockReturnThis(),
            orderBy: jest.fn().mockReturnThis(),
            limit: jest.fn().mockReturnThis(),
            offset: jest.fn().mockReturnThis(),
            skip: jest.fn().mockReturnThis(),
            take: jest.fn().mockReturnThis(),
            leftJoin: jest.fn().mockReturnThis(),
            leftJoinAndSelect: jest.fn().mockReturnThis(),
            innerJoin: jest.fn().mockReturnThis(),
            innerJoinAndSelect: jest.fn().mockReturnThis(),
            select: jest.fn().mockReturnThis(),
            addSelect: jest.fn().mockReturnThis(),
            groupBy: jest.fn().mockReturnThis(),
            having: jest.fn().mockReturnThis(),
            getOne: jest.fn(),
            getMany: jest.fn(),
            getManyAndCount: jest.fn(),
            getCount: jest.fn(),
            getRawOne: jest.fn(),
            getRawMany: jest.fn(),
            execute: jest.fn(),
        })),
    }),
    createMockService: (methods) => {
        const mockService = {};
        methods.forEach(method => {
            mockService[method] = jest.fn();
        });
        return mockService;
    },
    generateTestData: (type, overrides = {}) => {
        // This will be implemented with factories
        return { ...overrides };
    },
    cleanupDatabase: async () => {
        // Database cleanup implementation
        if (testDataSource && testDataSource.isInitialized) {
            // Clean up test data
        }
    },
};
// Environment validation
if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = 'test';
}
if (process.env.NODE_ENV !== 'test') {
    throw new Error('Tests must be run with NODE_ENV=test');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,